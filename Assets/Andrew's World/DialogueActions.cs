//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Andrew's World/DialogueActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DialogueActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DialogueActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DialogueActions"",
    ""maps"": [
        {
            ""name"": ""DialogueBox"",
            ""id"": ""6c8745dd-f41d-44ab-b1b2-e0cea3f8cb2e"",
            ""actions"": [
                {
                    ""name"": ""Continue"",
                    ""type"": ""Button"",
                    ""id"": ""9864ebc7-11ae-425b-abe7-3b3b8f0bac70"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""990f8559-7354-4b47-8a1a-e104767bc252"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""524700ea-c550-4605-b359-e032d34a0111"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DialogueBox
        m_DialogueBox = asset.FindActionMap("DialogueBox", throwIfNotFound: true);
        m_DialogueBox_Continue = m_DialogueBox.FindAction("Continue", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DialogueBox
    private readonly InputActionMap m_DialogueBox;
    private IDialogueBoxActions m_DialogueBoxActionsCallbackInterface;
    private readonly InputAction m_DialogueBox_Continue;
    public struct DialogueBoxActions
    {
        private @DialogueActions m_Wrapper;
        public DialogueBoxActions(@DialogueActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Continue => m_Wrapper.m_DialogueBox_Continue;
        public InputActionMap Get() { return m_Wrapper.m_DialogueBox; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogueBoxActions set) { return set.Get(); }
        public void SetCallbacks(IDialogueBoxActions instance)
        {
            if (m_Wrapper.m_DialogueBoxActionsCallbackInterface != null)
            {
                @Continue.started -= m_Wrapper.m_DialogueBoxActionsCallbackInterface.OnContinue;
                @Continue.performed -= m_Wrapper.m_DialogueBoxActionsCallbackInterface.OnContinue;
                @Continue.canceled -= m_Wrapper.m_DialogueBoxActionsCallbackInterface.OnContinue;
            }
            m_Wrapper.m_DialogueBoxActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Continue.started += instance.OnContinue;
                @Continue.performed += instance.OnContinue;
                @Continue.canceled += instance.OnContinue;
            }
        }
    }
    public DialogueBoxActions @DialogueBox => new DialogueBoxActions(this);
    public interface IDialogueBoxActions
    {
        void OnContinue(InputAction.CallbackContext context);
    }
}
